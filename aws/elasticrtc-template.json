{
  "Description" : "Kurento Cluster CloudFormation template",

  "Parameters" : {

    "KurentoCluster" : {
      "Type" : "String",
      "Default" : ""
    },

    "KmsImageMapName" : {
      "Description" : "Name of the key to look for KMS image in mappings",
      "Type": "String",
      "Default" : ""
    },

    "AppImageMapName" : {
      "Description" : "Name of the key to look for APP image in mappings",
      "Type" : "String",
      "Default" : ""
    },

    "DesiredCapacity" : {
      "Description" : "Number of KMS instance in the cluster",
      "Type" : "Number",
      "MinValue" : "1",
      "MaxValue" : "100"
    },

    "MinCapacity" : {
      "Description" : "Minimum number of KMS instances in the cluster",
      "Type" : "Number",
      "MinValue" : "0",
      "MaxValue" : "100"
    },

    "MaxCapacity" : {
      "Description" : "Maximum number of KMS instances in cluster",
      "Type" : "Number",
      "MinValue" : "1",
      "MaxValue" : "100"
    },

    "InstanceTenancy" : {
      "Description" : "AWS tenancy of instances",
      "Type" : "String",
      "Default" : "default",
      "AllowedValues" : [ "default", "dedicated"]
    },

    "InstanceType" : {
      "Description" : "AWS Instance type to be deployed by Kurento cluster",
      "Type" : "String",
      "Default" : "m3.medium"
    },

    "AppInstanceType" : {
      "Description" : "AWS Instance type used for APP nodes",
      "Type" : "String",
      "Default" : "m3.medium"
    },

    "ApiKey" : {
      "Description" : "Secret access key to KMS API interface",
      "Type" : "String",
      "Default" : "kurento",
      "AllowedPattern":"[A-Za-z0-9]*"
    },

    "ApiOrigin" : {
      "Description" : "CIDR from where KMS API requests are allowed",
      "Type" : "String",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Description" : "Name of the AWS key name configured in for SSH access",
      "Type" : "String",
      "Default" : ""
    },

    "ControlOrigin" : {
      "Description" : "Network CIDR from where control connections are allowed: SSH, WS, etc",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },

    "CostMap" : {
      "Description" : "Map of MediaElement costs",
      "Type" : "String",
      "Default" : ""
    },

    "SslCertificate1" : {
      "Description" : "SSL certificate, chunk 1",
      "Type" : "String",
      "Default" : ""
    },

    "SslCertificate2" : {
      "Description" : "SSL certificate, chunk 2",
      "Type" : "String",
      "Default" : ""
    },

    "SslKey" : {
      "Description" : "SSL key",
      "Type" : "String",
      "Default" : ""
    },

    "EnableTurn" : {
      "Description" : "[Optional] Whether to enable internal TURN server",
      "Type" : "String",
      "AllowedValues" : [ "true", "false" ],
      "Default" : "false"
    },

    "TurnUsername" : {
      "Description" : "Turn username",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern":"[A-Za-z0-9]*"
    },

    "TurnPassword" : {
      "Description" : "Turn password",
      "Type" : "String",
      "Default" : "",
      "AllowedPattern":"[A-Za-z0-9]*"
    },

    "HostedZoneId" : {
      "Description" : "ID of the route53 hosted zone where DNS resources will be added",
      "Type" : "String",
      "Default" : ""
    },

    "DnsName" : {
      "Description" : "FQDN of Kurento Cluster",
      "Type" : "String",
      "Default" : ""
    },

    "HealthCheckGracePeriod" : {
      "Description" : "Grace period in seconds given to autoscaling group before health checks are activated",
      "Type" : "Number",
      "Default" : "300"
    },

    "UserS3Bucket" : {
      "Description" : "S3 Bucket for permanent storage",
      "Type" : "String",
      "Default" : ""
    },

    "LogStorage" : {
      "Description" : "Specifies log storage for cluster",
      "Type" : "String",
      "AllowedValues" : [ "cloudwatch" , "s3" ,"elasticsearch", "none" ],
      "Default" : "none"
    },

    "ElasticSearchTransport" : {
      "Description" : "Transport address of the elasticsearch service",
      "Type" : "String",
      "Default" : ""
    },

    "ElasticSearchUser" : {
      "Description" : "Elasticsearch username",
      "Type" : "String",
      "Default" : ""
    },

    "ElasticSearchPass" : {
      "Description" : "Elasticsearch password",
      "Type" : "String",
      "Default" : ""
    },

    "ElasticSearchSsl" : {
      "Description" : "Whether to use or not SSL when connecting to Elasticsearch",
      "Type" : "String",
      "Default" : ""
    },

    "EnableApp" : {
      "Description" : "App code to be enabled. None by default",
      "Type" : "String",
      "AllowedValues" : [ "true", "false" ],
      "Default" : "false"
    },

    "AppName" : {
      "Description" : "Name of enabled App. None by default",
      "Type" : "String",
      "AllowedValues" : [ "none" , "room" ],
      "Default" : "none"
    },

    "Version" : {
      "Description" : "Informative parameter with cluster version",
      "Type" : "String",
      "Default" : ""
    },

    "KurentoCidrBlock" : {
      "Description" : "Internal parameter",
      "Type" : "String",
      "Default" : "10.0.0.0/16"
    },

    "InspectorUser" : {
      "Description" : "Username required to access Inspector web console",
      "Type" : "String",
      "Default" : ""
    },

    "InspectorPass" : {
      "Description" : "MD5 encoded password required to access Inspector web console",
      "Type" : "String",
      "Default" : ""
    },

    "KmsControlPort" : {
      "Description" : "Internal parameter. Port where cluster listens for requests",
      "Type" : "String",
      "Default" : "8888"
    },

    "AppControlPort" : {
      "Description" : "Internal parameter. Port where application listens for requets",
      "Type" : "String",
      "Default" : "8080"
    },

    "KurentoLoadBalancerName" : {
      "Description" : "Internal parameter. Name given to ELB",
      "Type" : "String",
      "Default" : "KurentoLoadBalancer"
    },

    "KurentoLoadMetricName" : {
      "Description" : "Internal parameter. Name of the load metric",
      "Type" : "String",
      "Default" : "ElasticRtcLoad"
    },

    "AppUrl" : {
      "Description" : "Internal parameter. App binary",
      "Type" : "String",
      "Default" : ""
    },

    "AutoscalingHeartbeatTimeout" : {
      "Description" : "Internal parameter. Autoscaling hook heartbeat timeout",
      "Type" : "String",
      "Default" : ""
    },

    "KmsControllerUrl" : {
      "Description" : "Internal parameter. KMS controller binary",
      "Type" : "String",
      "Default" : ""
    },

    "SessionReconnectionTime" : {
      "Description" : "Internal parameter. KMS session reconnection timeout",
      "Type" : "String",
      "Default" : ""
    },

    "UseProxy" : {
      "Description" : "Internal parameter. Enable/Disable nginx proxy",
      "Type" : "String",
      "AllowedValues" : [ "true" , "false" ],
      "Default" : "true"
    },

    "KmsCertificate" : {
      "Description" : "Internal parameter. Allow all KMS to use the same Certificate",
      "Type" : "String",
      "Default" : ""
    },

    "TestMode" : {
      "Description" : "Internal parameter. Intended to open ports during tests",
      "Type" : "String",
      "AllowedValues" : [ "true" , "false" ],
      "Default" : "false"
    }

  },

  "Mappings" : {
    "RegionMap" : {}
  },

  "Conditions" : {
    "IsKeyName" : { "Fn::Not" : [{ "Fn::Equals" : [ {"Ref" : "KeyName"}, ""]}]},
    "IsDnsName" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "DnsName" } , "" ]}]},
    "IsHeartbeat" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "AutoscalingHeartbeatTimeout"} , ""]}]},
    "IsHostedZone" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "HostedZoneId" } , "" ]}]},
    "IsCreateCname" : { "Fn::And" : [ { "Condition" : "IsHostedZone"} , { "Condition" : "IsDnsName" } ] },
    "IsSsl" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "SslCertificate1" } , ""]}]},
    "IsKmsControllerUrl" : { "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "KmsControllerUrl" } , "" ]}]},
    "IsCreateS3Bucket" : { "Fn::Equals" : [ { "Ref" : "UserS3Bucket" }, ""]},
    "IsTestMode" : { "Fn::Equals" : [ { "Ref" : "TestMode" }, "true"]},
    "IsUseProxy" : { "Fn::Equals" : [ { "Ref" : "UseProxy" }, "true"]},
    "IsEnableApp" : { "Fn::Equals" : [ {"Ref" : "EnableApp"}, "true"]},
    "IsAppUrl" : { "Fn::Not" : [{ "Fn::Equals" : [ { "Ref" : "AppUrl" } , ""]}]}
  },

  "Resources" : {
    "KurentoVpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "KurentoCidrBlock" },
        "InstanceTenancy" : { "Ref" : "InstanceTenancy" }
      }
    },

    "KurentoNet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "CidrBlock" : { "Ref" : "KurentoCidrBlock" },
        "VpcId" : { "Ref": "KurentoVpc" }
      }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "KurentoVpc" }
      }
    },

    "InternetRoute" :{
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "KurentoNet" }
      }
    },

    "InternetGateway" :{
      "Type" : "AWS::EC2::InternetGateway"
    },

    "AttachInternetGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "KurentoVpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "KurentoLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Listeners" : [
          { "Fn::If" : [ "IsSsl",
            {
              "LoadBalancerPort" : "443",
              "InstancePort" : { "Fn::If" : [ "IsUseProxy", "8443", { "Ref" : "KmsControlPort"}]},
              "Protocol" : "TCP"
            },
            {
              "LoadBalancerPort" : "80",
              "InstancePort" : { "Fn::If" : [ "IsUseProxy", "8080", { "Ref" : "KmsControlPort"}]},
              "Protocol" : "TCP"
            }]
          }
        ],
        "HealthCheck": {
          "Target": { "Fn::Join":["",["TCP:",{ "Ref" : "KmsControlPort" }]]},
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "3",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionSettings" :{
           "IdleTimeout" : "300"
        },
        "LoadBalancerName" : { "Ref" : "KurentoLoadBalancerName" },
        "Scheme" : "internet-facing",
        "ConnectionSettings" :{
           "IdleTimeout" : "300"
        },
        "SecurityGroups" : [ { "Ref" : "KurentoLoadBalancerSecurityGroup" }],
        "Subnets" : [{ "Ref" : "KurentoNet" }]
      }
    },

    "KurentoLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Kurento Cluster ELB Security Group",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]},
            "ToPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]},
            "CidrIp" : { "Ref" : "ApiOrigin" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]},
            "ToPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]},
            "CidrIp" : { "Ref" : "ControlOrigin" }
          },
          { "Fn::If" : [ "IsTestMode",
              {
                "IpProtocol" : "tcp",
                "FromPort" : "7",
                "ToPort" : "7",
                "CidrIp" : "0.0.0.0/0"
              },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          { "Fn::If" : [ "IsTestMode",
              {
                "IpProtocol" : "udp",
                "FromPort" : "7",
                "ToPort" : "7",
                "CidrIp" : "0.0.0.0/0"
              },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          { "Fn::If" : [ "IsTestMode",
              {
                "IpProtocol" : "icmp",
                "FromPort" : "8",
                "ToPort" : "-1",
                "CidrIp" : "0.0.0.0/0"
              },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          { "Fn::If" : [ "IsEnableApp",
              {
                "IpProtocol" : "tcp",
                "FromPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]},
                "ToPort" : { "Fn::If" : [ "IsSsl" , "443", "80"]}
              },
              { "Ref" : "AWS::NoValue" }]
          }
        ],
        "VpcId" : { "Ref" : "KurentoVpc"}
      }
    },

    "KurentoInternalLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Listeners" : [
          {
            "LoadBalancerPort" : { "Ref" : "KmsControlPort" },
            "InstancePort" : { "Ref" : "KmsControlPort" },
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck": {
          "Target": { "Fn::Join":["",["TCP:",{ "Ref" : "KmsControlPort" }]]},
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "3",
          "Interval": "10",
          "Timeout": "5"
        },
        "ConnectionSettings" :{
           "IdleTimeout" : "300"
        },
        "LoadBalancerName" : { "Fn::Join" : [ "" , [ { "Ref" : "KurentoLoadBalancerName" }, "I"]]},
        "Scheme" : "internal",
        "ConnectionSettings" :{
           "IdleTimeout" : "300"
        },
        "SecurityGroups" : [ { "Ref" : "KurentoInternalLoadBalancerSecurityGroup" }],
        "Subnets" : [{ "Ref" : "KurentoNet" }]
      }
    },

    "KurentoInternalLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Kurento Cluster ELB Security Group",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : { "Ref" : "KmsControlPort"},
            "ToPort" : { "Ref" : "KmsControlPort"},
            "CidrIp" : { "Ref" : "KurentoCidrBlock" }
          }
        ],
        "VpcId" : { "Ref" : "KurentoVpc"}
      }
    },

    "KurentoGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ { "Fn::GetAtt" : [ "KurentoNet", "AvailabilityZone" ] } ],
        "VPCZoneIdentifier" : [ { "Ref" : "KurentoNet" } ],
        "LaunchConfigurationName" : { "Ref" : "KurentoLaunchConfiguration" },
        "MinSize" : { "Ref" : "MinCapacity" },
        "MaxSize" : { "Ref" : "MaxCapacity" },
        "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
        "LoadBalancerNames" : [
          { "Ref" : "KurentoLoadBalancer" },
          { "Ref" : "KurentoInternalLoadBalancer" }
        ],
        "HealthCheckType" : "ELB",
        "HealthCheckGracePeriod" : { "Ref" : "HealthCheckGracePeriod" },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : { "Fn::Join":["-", [ "KMS",{ "Ref": "AWS::StackName" }]]},
          "PropagateAtLaunch" : "true"
          }]
      },
      "CreationPolicy" :{
        "ResourceSignal" : {
          "Count" : { "Ref" : "DesiredCapacity" },
          "Timeout" : "PT50M"
        }
      }
    },

    "KurentoLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "config" : {
            "files" : {
              "/tmp/kurento-kmscluster-controller.jar" : {
                "Fn::If" : [ "IsKmsControllerUrl" ,
                  { "source" : { "Ref" : "KmsControllerUrl" } },
                  { "content" : "NONE" }
                ]
              },
              "/etc/ssl/kurento.crt" : {
                "content" : { "Fn::If" : [ "IsSsl" ,
                  { "Fn::Join" : [ "",[ { "Ref" : "SslCertificate1" }, { "Ref" : "SslCertificate2"}]]},
                  "NONE"
                ]},
                "owner" : "root",
                "mode" : "000600"
              },
              "/etc/ssl/kurento.key" : {
                "content" : {"Fn::If" : [ "IsSsl" ,
                  { "Ref" : "SslKey" },
                  "NONE"
                ]},
                "owner" : "root",
                "mode" : "000600"
              },
              "/etc/ssl/kms.pem" : {
                "content" : { "Ref" : "KmsCertificate"},
                "owner" : "kurento",
                "mode" : "000600"
              }
            }
          }
        }
      },
      "Properties" :{
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, { "Ref" : "KmsImageMapName"} ] },
        "KeyName" : { "Fn::If" : [ "IsKeyName" , { "Ref" : "KeyName" } , { "Ref" : "AWS::NoValue"}]},
        "IamInstanceProfile" : { "Ref" : "KurentoIamProfile" },
        "SecurityGroups" : [ { "Ref" : "KmsSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "AssociatePublicIpAddress" : "true",
        "UserData" : {
          "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",
            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "date\n",
            "/opt/aws/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource KurentoLaunchConfiguration ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n",
            "date\n",
            "kmscluster-controller-init.sh ",
            " --region ", { "Ref" : "AWS::Region" },
            " --stack-name ", { "Ref" : "AWS::StackName" },
            " $([ -n '", { "Ref" : "ApiKey" }, "' ] && echo --kms-control-path ", { "Ref" :  "ApiKey" }, ")",
            " --enable-turn ", { "Ref" : "EnableTurn" },
            " $([ -n '", { "Ref" : "TurnUsername" } ,"' ] && echo --turn-username " , { "Ref" : "TurnUsername" } , ")",
            " $([ -n '", { "Ref" : "TurnPassword" } ,"' ] && echo --turn-password " , { "Ref" : "TurnUsername" } , ")",
            " $([ -n '", { "Ref" : "SessionReconnectionTime"} ,"' ] && echo --kurento-session-reconnection-time " , { "Ref" : "SessionReconnectionTime" } , ")",
            " $([ -n '", { "Ref" : "InspectorUser"} ,"' ] && echo --inspector-user " , { "Ref" : "InspectorUser" } ,")",
            " $([ -n '", { "Ref" : "InspectorPass"} ,"' ] && echo --inspector-pass " , { "Ref" : "InspectorPass" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchTransport" } ,"' ] && echo --elasticsearch-transport " , { "Ref" : "ElasticSearchTransport" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchUser" } ,"' ] && echo --elasticsearch-user " , { "Ref" : "ElasticSearchUser" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchPass" } ,"' ] && echo --elasticsearch-password " , { "Ref" : "ElasticSearchPass" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchSsl" } ,"' ] && echo --elasticsearch-ssl " , { "Ref" : "ElasticSearchSsl" } ,")",
            " $([ -n '", { "Ref" : "CostMap" }, "' ] && echo --cost-map " , { "Ref" : "CostMap" } ,")",
            " $([ -n '", { "Ref" : "AutoscalingHeartbeatTimeout" }, "' ] && echo --heartbeat-timeout " , { "Ref" : "AutoscalingHeartbeatTimeout" }, ")",
            { "Fn::If" :[ "IsSsl" ,
              { "Fn::Join" : [ "" ,[
                " --ssl-cert /etc/ssl/kurento.crt",
                " --ssl-key /etc/ssl/kurento.key"
                ]]
              },
              { "Ref" : "AWS::NoValue" }
            ]},
            { "Fn::If" :[ "IsKmsControllerUrl" ,
              { "Fn::Join" : [ "" ,[
                " --kms-controller-url /tmp/kurento-kmscluster-controller.jar"
                ]]
              },
              { "Ref" : "AWS::NoValue" }
            ]},
            { "Fn::If" : [ "IsEnableApp" ,
              { "Fn::Join" : [ "", [
                " --enable-app true",
                " --app-elb ", { "Fn::GetAtt" : [ "AppLoadBalancer", "DNSName" ] }, ":", { "Ref" : "AppControlPort" }
                ]]
              },
              { "Ref" : "AWS::NoValue" }
            ]},
            " --kurento-iam-role ", { "Ref": "KurentoIamRole"},
            " --s3-bucket " , { "Fn::If" : ["IsCreateS3Bucket", { "Ref" : "KurentoS3Bucket" }, { "Ref" : "UserS3Bucket" }]},
            " --log-storage " , { "Ref" : "LogStorage" },
            " --use-proxy " , { "Ref" : "UseProxy" },
            " --sqs-queue-url " , { "Ref" : "KurentoSQSQueue"},
            " --kms-cert /etc/ssl/kms.pem" ,
            " --kms-url ", { "Fn::Join" : [ "",
              [ { "Fn::If" : [ "IsSsl" , "wss", "ws" ]}, "://",
                { "Fn::If" : [ "IsDnsName" ,
                  { "Ref": "DnsName" } ,
                  { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ]}
                ]}, "/",
                { "Ref" : "ApiKey"}]]},
            " --app-url ", { "Fn::Join" : [ "",[
                { "Fn::If" : [ "IsSsl" , "https", "http" ]},
                  "://",
                  { "Fn::If" : [ "IsDnsName" ,
                    { "Ref": "DnsName" } ,
                    { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ]}
                  ]}, "/app"
                ]]
            },
            " && date && cfn-signal",
            " --region ", { "Ref" : "AWS::Region" },
            " --stack ", { "Ref" : "AWS::StackName" },
            " --resource KurentoGroup"
          ]]}
        }
      },
      "DependsOn" : "AttachInternetGateway"
    },

    "KmsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "KMS Security Group",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "ControlOrigin"}
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : { "Fn::If" : [ "IsSsl" , "8443", "8080"]},
          "ToPort" : { "Fn::If" : [ "IsSsl" , "8443", "8080"]},
          "SourceSecurityGroupId" : { "Ref" : "KurentoLoadBalancerSecurityGroup" }
        },
        { "Fn::If" : [ "IsTestMode",
            {
              "IpProtocol" : "tcp",
              "FromPort" : { "Ref" : "KmsControlPort" },
              "ToPort" : { "Ref" : "KmsControlPort" },
              "CidrIp" : "0.0.0.0/0"
            },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        { "Fn::If" : [ "IsTestMode",
            {
              "IpProtocol" : "tcp",
              "FromPort" : { "Fn::If" : [ "IsSsl" , "8443", "8080"]},
              "ToPort" : { "Fn::If" : [ "IsSsl" , "8443", "8080"]},
              "CidrIp" : "0.0.0.0/0"
            },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        { "Fn::If" : [ "IsTestMode",
            {
              "IpProtocol" : "tcp",
              "FromPort" : "7",
              "ToPort" : "7",
              "CidrIp" : "0.0.0.0/0"
            },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        { "Fn::If" : [ "IsTestMode",
            {
              "IpProtocol" : "udp",
              "FromPort" : "7",
              "ToPort" : "7",
              "CidrIp" : "0.0.0.0/0"
            },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        { "Fn::If" : [ "IsTestMode",
            {
              "IpProtocol" : "icmp",
              "FromPort" : "8",
              "ToPort" : "-1",
              "CidrIp" : "0.0.0.0/0"
            },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : { "Ref" : "KmsControlPort" },
          "ToPort" : { "Ref" : "KmsControlPort" },
          "CidrIp" : { "Ref" : "KurentoCidrBlock" }
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "5701",
          "ToPort" : "5801",
          "CidrIp" : { "Ref" : "KurentoCidrBlock"}
        },
        {
          "IpProtocol" : "udp",
          "FromPort" : "16380",
          "ToPort" : "65535",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "49152",
          "ToPort" : "65535",
          "CidrIp" : "0.0.0.0/0"
        }],
        "VpcId" : { "Ref" : "KurentoVpc"}
      }
    },

    "KurentoSQSQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
      }
    },

    "KurentoLifecycleHook" : {
      "Type" : "AWS::AutoScaling::LifecycleHook",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "KurentoGroup" },
        "HeartbeatTimeout" : { "Fn::If" : [ "IsHeartbeat", { "Ref" : "AutoscalingHeartbeatTimeout"}, { "Ref" : "AWS::NoValue"}]},
        "LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN" : { "Fn::GetAtt" : [ "KurentoSQSQueue" , "Arn" ] },
        "RoleARN" : { "Fn::GetAtt" : [ "KurentoIamRole", "Arn" ]}
      }
    },

    "KurentoScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "KurentoGroup" },
        "PolicyType" : "StepScaling",
        "StepAdjustments" : []
      }
    },

    "KurentoScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "KurentoGroup" },
        "EstimatedInstanceWarmup" : "",
        "PolicyType" : "StepScaling",
        "StepAdjustments" : []
      }
    },

    "KurentoUsageAlarmHigh" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "MetricName" : "ElasticRTCLoad",
        "Namespace" : "ElasticRTC",
        "Period" : "60",
        "EvaluationPeriods" : "1",
        "Statistic" : "Average",
        "Threshold" : "50",
        "AlarmActions" : [ { "Ref" : "KurentoScaleUpPolicy" } ],
        "Dimensions" : [
          {
            "Name" : "ElasticRTCCluster",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "ComparisonOperator" : "GreaterThanThreshold"
      }
    },

    "KurentoUsageAlarmLow" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "MetricName" : "ElasticRTCLoad",
        "Namespace" : "ElasticRTC",
        "Period" : "60",
        "EvaluationPeriods" : "2",
        "Statistic" : "Average",
        "Threshold" : "50",
        "AlarmActions" : [ { "Ref" : "KurentoScaleDownPolicy" } ],
        "Dimensions" : [
          {
            "Name" : "ElasticRTCCluster",
            "Value": { "Ref": "AWS::StackName" }
          }
        ],
        "ComparisonOperator" : "LessThanThreshold"
      }
    },

    "KurentoResourceSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Condition" : "IsCreateCname",
      "Properties" : {
        "HostedZoneId" : { "Ref" :  "HostedZoneId" },
        "Name" : { "Ref": "DnsName" },
        "Type" : "CNAME",
        "TTL" : "300",
        "ResourceRecords" : [
         { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ] }
        ]
      }
    },

    "KurentoS3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Condition" : "IsCreateS3Bucket",
      "Properties" : {
        "BucketName" : { "Fn::Join" : [ "", [ {"Ref" : "AWS::Region"} , "-" , { "Ref": "AWS::StackName" }]]}
      }
    },

    "KurentoIamRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2018-04-25",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com",
                "autoscaling.amazonaws.com"
              ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "S3Storage",
            "PolicyDocument": {
              "Version" : "2018-04-25",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                      "s3:DeleteObject",
                      "s3:GetObject",
                      "s3:ListBucket",
                      "s3:PutObject",
                      "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    { "Fn::Join": ["", [
                      "arn:aws:s3:::",
                      { "Fn::If" : ["IsCreateS3Bucket", { "Ref" : "KurentoS3Bucket" }, { "Ref" : "UserS3Bucket" }]} ,"/*"
                    ]]},
                    { "Fn::Join": ["", [
                      "arn:aws:s3:::",
                      { "Fn::If" : ["IsCreateS3Bucket", { "Ref" : "KurentoS3Bucket" }, { "Ref" : "UserS3Bucket" }]} ,"*"
                    ]]}
                  ]
                }
              ]
            }
          },
          { "Fn::If" : ["IsTestMode",
              {
                "PolicyName": "S3StorageTest",
                "PolicyDocument": {
                  "Version" : "2018-04-25",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                          "s3:GetObject",
                          "s3:ListBucket"
                      ],
                      "Resource": [
                        "arn:aws:s3:::kurento-s3-test*"
                      ]
                    }
                  ]
                }
              },
              { "Ref" : "AWS::NoValue" }
            ]
          },
          {
            "PolicyName": "Route53",
            "PolicyDocument": {
              "Version" : "2018-04-25",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets*",
                    "route53:GetHostedZone"
                  ],
                  "Resource": { "Fn::Join" : [ "", ["arn:aws:route53:::hostedzone/" ,
                    { "Fn::If" : [ "IsHostedZone" ,{ "Ref" : "HostedZoneId" }, "DONOTALLOWHOSTEDZONE" ] } ]] }
                }
              ]
            }
          },
          {
            "PolicyName": "HzAutodiscovery",
            "PolicyDocument": {
              "Version" : "2018-04-25",
              "Statement": [ {
                "Effect": "Allow",
                "Action": "ec2:Describe*",
                "Resource": "*"
              }]
            }
          },
          {
            "PolicyName": "AwsAutoscaling",
            "PolicyDocument": {
              "Version" : "2018-04-25",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:RecordLifecycleActionHeartbeat",
                    "autoscaling:DescribeLifecycleHooks"
                  ],
                  "Resource": "*"
                },

                {
                  "Effect": "Allow",
                  "Action": "sqs:*",
                  "Resource": { "Fn::GetAtt" : [ "KurentoSQSQueue", "Arn" ] }
                }
              ]
            }
          },
          {
            "PolicyName": "Logging",
            "PolicyDocument": {
              "Version" : "2018-04-25",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:Describe*",
                    "logs:Create*",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "KurentoIamProfile" : {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "KurentoIamRole"} ]
      }
    },

    "AppLoadBalancer" :{
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Condition" : "IsEnableApp",
      "Properties" : {
        "Listeners" : [
          {
            "LoadBalancerPort" : { "Ref" : "AppControlPort" },
            "InstancePort" : { "Ref" : "AppControlPort" },
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ ":", [ "TCP", { "Ref" : "AppControlPort" }]]},
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "3",
          "Interval" : "10",
          "Timeout" : "5"
        },
        "ConnectionSettings" : {
          "IdleTimeout" : "300"
        },
        "LoadBalancerName" : { "Fn::Join" : [ "",[ { "Ref" : "KurentoLoadBalancerName" } , "A" ]]},
        "Scheme" : "internal",
        "SecurityGroups" : [ { "Ref" : "AppLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "KurentoNet" }]
      }
    },

    "AppLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition" : "IsEnableApp",
      "Properties" : {
        "GroupDescription" : "App ELB Security Group",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : { "Ref" : "AppControlPort" },
            "ToPort" : { "Ref" : "AppControlPort" },
            "SourceSecurityGroupId" : { "Ref" : "KmsSecurityGroup" }
          }
        ],
        "VpcId" : { "Ref" : "KurentoVpc"}
      }
    },

    "AppGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Condition" : "IsEnableApp",
      "Properties" : {
        "AvailabilityZones" : [ { "Fn::GetAtt" : [ "KurentoNet", "AvailabilityZone" ] } ],
        "VPCZoneIdentifier" : [ { "Ref" : "KurentoNet" } ],
        "LaunchConfigurationName" : { "Ref" : "AppLaunchConfiguration" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : "1",
        "LoadBalancerNames" : [ { "Ref" : "AppLoadBalancer"}],
        "HealthCheckType" : "ELB",
        "HealthCheckGracePeriod" : { "Ref" : "HealthCheckGracePeriod" },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : { "Fn::Join":["-", [ "APP",{ "Ref": "AWS::StackName" }]]},
          "PropagateAtLaunch" : "true"
          }]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Count" : "1",
          "Timeout" : "PT50M"
        }
      }
    },

    "AppLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Condition" : "IsEnableApp",
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "config" : {
            "files" : {
              "/tmp/kurento-app.jar" : {
                "Fn::If" : [ "IsAppUrl" ,
                  {
                    "source" : { "Ref" : "AppUrl" },
                    "mode" : "000755"
                  },
                  {
                    "content" : "NONE"
                  }
                ]
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, { "Ref" : "AppImageMapName"} ] },
        "KeyName" : { "Fn::If" : [ "IsKeyName" , { "Ref" : "KeyName" } , { "Ref" : "AWS::NoValue"}]},
        "IamInstanceProfile" : { "Ref" : "KurentoIamProfile" },
        "SecurityGroups" : [ { "Ref" : "AppSecurityGroup"}],
        "InstanceType" : { "Ref" : "AppInstanceType" },
        "AssociatePublicIpAddress" : "true",
        "UserData" : {
          "Fn::Base64": { "Fn::Join":["", [
            "#!/bin/bash -ex\n",
            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
            "date\n",
            "/opt/aws/bin/cfn-init -v ",
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource AppLaunchConfiguration ",
            "         --region ", { "Ref" : "AWS::Region" }, "\n",
            "date\n",
            "kurento-app-init.sh ",
            " --region ", { "Ref" : "AWS::Region" },
            " --stack-name ", { "Ref" : "AWS::StackName" },
            " --kms-uri ws://", { "Fn::GetAtt" : [ "KurentoInternalLoadBalancer" , "DNSName" ] } ,
                    ":", { "Ref" : "KmsControlPort"},
                    "/" , { "Ref" : "ApiKey"},
            " --log-storage " , { "Ref" : "LogStorage" },
            " --s3-bucket " , { "Fn::If" : ["IsCreateS3Bucket", { "Ref" : "KurentoS3Bucket" }, { "Ref" : "UserS3Bucket" }]},
            " $([ -n '", { "Ref" : "ElasticSearchTransport" } ,"' ] && echo --elasticsearch-transport " , { "Ref" : "ElasticSearchTransport" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchUser" } ,"' ] && echo --elasticsearch-user " , { "Ref" : "ElasticSearchUser" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchPass" } ,"' ] && echo --elasticsearch-password " , { "Ref" : "ElasticSearchPass" } ,")",
            " $([ -n '", { "Ref" : "ElasticSearchSsl" } ,"' ] && echo --elasticsearch-ssl " , { "Ref" : "ElasticSearchSsl" } ,")",
            { "Fn::If" :[ "IsAppUrl" ,
              { "Fn::Join" : [ "" ,[
                " --app-url /tmp/kurento-app.jar"
                ]]
              },
              { "Ref" : "AWS::NoValue" }
            ]},
            " && date && cfn-signal",
            "         --region ", { "Ref" : "AWS::Region" },
            "         --stack ", { "Ref" : "AWS::StackName" },
            "         --resource AppGroup"
          ]]}
        }
      }
    },

    "AppSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Condition" : "IsEnableApp",
      "Properties" : {
        "GroupDescription" : "App Security Group",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "ControlOrigin" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : { "Ref" : "AppControlPort" },
            "ToPort" : { "Ref" : "AppControlPort" },
            "SourceSecurityGroupId" : { "Ref" : "AppLoadBalancerSecurityGroup" }
          }
        ],
        "VpcId" : { "Ref" : "KurentoVpc"}
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "Kurento cluster control URL",
      "Value" :  { "Fn::Join" : [ "",
        [ { "Fn::If" : [ "IsSsl" , "wss", "ws" ]}, "://",
          { "Fn::If" : [ "IsDnsName" ,
            { "Ref": "DnsName" } ,
            { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ]}
          ]}, "/",
          { "Ref" : "ApiKey"}]]}
    },
    "AppURL" : {
      "Description" : "Application URL",
      "Value" :  { "Fn::Join" : [ "",[
        { "Fn::If" : [ "IsSsl" , "https", "http" ]},
          "://",
        { "Fn::If" : [ "IsDnsName" ,
          { "Ref": "DnsName" } ,
          { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ]}
        ]}, "/app"
      ]]},
      "Condition" : "IsEnableApp"
    },
    "ClusterCname" : {
      "Description" : "CNAME assigned by cluster owner",
      "Value" : { "Ref": "DnsName" }
    },
    "AWSCname" : {
      "Description" : "CNAME assigned by AWS to Kurento cluster",
      "Value" : { "Fn::GetAtt" : [ "KurentoLoadBalancer", "DNSName" ]}
    }
  }
}
